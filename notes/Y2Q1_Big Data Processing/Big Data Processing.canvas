{
	"nodes":[
		{"id":"1eb0985c8752773b","type":"file","file":"attachments/Pasted image 20241105003542.png","x":640,"y":360,"width":400,"height":123},
		{"id":"fd3c3052f35bd28b","type":"text","text":"Big Data Processing","x":-19,"y":2080,"width":859,"height":566},
		{"id":"ff15ae6add4fdc74","type":"file","file":"notes/Y2Q1_Big Data Processing/Spark.md","x":-19,"y":720,"width":859,"height":566},
		{"id":"99b85af15c261286","type":"file","file":"notes/Y2Q1_Big Data Processing/Replication Architectures.md","x":880,"y":1644,"width":840,"height":436},
		{"id":"c751a0ace8be9df1","type":"file","file":"notes/Y2Q1_Big Data Processing/Logical Time.md","x":940,"y":880,"width":780,"height":640},
		{"id":"17aff3f5a717b119","type":"link","url":"https://www.youtube.com/watch?v=x-D8iFU1d-o","x":1906,"y":1177,"width":640,"height":360},
		{"id":"6f277124abac8053","type":"link","url":"https://www.youtube.com/watch?v=GeGxgmPTe4c&t=53s","x":1892,"y":1790,"width":640,"height":360},
		{"id":"a9d6f845a3d405e0","type":"file","file":"notes/Y2Q1_Big Data Processing/Scala.md","x":-120,"y":-1080,"width":859,"height":566},
		{"id":"1ebb34f410cfc1bf","type":"file","file":"notes/Y2Q1_Big Data Processing/recap.md","x":365,"y":2834,"width":695,"height":106},
		{"id":"57383b755c65c9db","type":"link","url":"https://burcuku.github.io/cse2520-bigdata/spark.html","x":-572,"y":666,"width":400,"height":400},
		{"id":"7e0c4d185a3f13fb","type":"link","url":"https://cse.buffalo.edu/~stevko/courses/cse486/spring13/lectures/26-consistency2.pdf","x":-520,"y":1444,"width":400,"height":400},
		{"id":"d10d5b94b4b0ae23","type":"file","file":"attachments/BDP-NO-DISTRACTIONS (1).pdf","x":-599,"y":117,"width":400,"height":400},
		{"id":"35901844a412e63e","type":"text","text":"MVCC multi verwsion concurrency control\n","x":-805,"y":2216,"width":250,"height":60},
		{"id":"0c2e9db1976d336f","type":"text","text":"Distributed concensus","x":2226,"y":2246,"width":250,"height":60},
		{"id":"7e58efe219189a68","type":"link","url":"https://www.youtube.com/watch?v=WSdg_Km4rIg","x":-1212,"y":1790,"width":640,"height":360},
		{"id":"c6e3525ce87762e5","type":"link","url":"https://en.wikipedia.org/wiki/Causal_consistency","x":-1205,"y":1157,"width":400,"height":400},
		{"id":"6a5db41b632b677a","type":"text","text":"causal consistency → sequential consistency → linear consistency\n\n- causal consistency: for causality relations between operations a vector clock is used to ensure the order for those (isolated) operations\n- sequential consistency: there is some total order that all replicas adhere to\n- linear consistency: sequential consistency with adherance to realtime order\n\n- Data processing Tools & Resources\n    \n    > Unix, the de-facto standard for small-ish data\n    \n    > Spark, and related libraries, for batch processing\n    \n    > Flink for stream processing\n    \n    > Spark and custom code for graphs\n    \n- Languages Used\n    \n    > **Bash**: for automating data processing\n    \n    > **Scala**: the de-facto standard for high performance data processing\n    \n- ETL cycle\n    \n    > Extract: convert raw/semi-structured data into structured data Transform: convert units, join data sources, cleanup Load: load data into another system (Further processing)\n    \n- Big data engineering vs analytics\n    \n    > building pipelines vs discovering patterns\n    \n- Batch vs Stream processing\n    \n    > Process an entire dataset at once vs process data at respective time of arrival\n    \n- Distributing data processing operations on multiple machines:\n    \n    ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/90173e02-938b-4fdd-8d3d-fcecc799f537/cf6bfac5-b776-4bf1-adb5-1081a3129d60/image.png)\n    \n    > Data-parallelism: The same algorithm is ran in parallel on different data chunks Task-parallelism: Different algorithms run in parallel on the same data\n    \n- Modern software allows distributed systems based on commodity computers instead of specialized enterprise machines\n    \n- Desirable properties of a big data processing system\n    \n    > Robustness, fault-tolerance Low latency reads/updates Scalability Generalization Extensibility Ad hoc queries Minimal maintenance Debuggability\n    \n- Big Data technologies history\n    \n    > 2003: Google publishes the Google Filesystem paper, a large-scale distributed file system 2004: Google publishes the Map/Reduce paper, a distributed data processing abstraction 2006: Yahoo creates and open sources Hadoop, inspired by the Google papers  \n    > 2006: Amazon launches its Elastic Compute Cloud, offering cheap, elastic resources 2007: Amazon publishes the DynamoDB paper, sketches the blueprints of a cloud-native database  \n    > 2009 – onwards: The NoSQL movement. Schema-less, distributed databases defy the SQL way of storing data  \n    > 2010: Matei Zaharia et al. publish the Spark paper, brings FP to in-memory computations  \n    > 2012: Both Spark Streaming and Apache Flink appear, able to handle really high volume stream processing  \n    > 2012: Alex Krizhevsky et al. publish their deep learning image classification paper re-igniting interest in neural networks and solidifying the value of big data\n    \n- The Big Data Tech Landscape\n    \n    > ![image.png](https://prod-files-secure.s3.us-west-2.amazonaws.com/90173e02-938b-4fdd-8d3d-fcecc799f537/adda4589-3c5f-45f3-bc75-34a0b6c104e9/image.png)\n    \n- Progress is mostly industry-driven\n    \n- Typical problems solved with Big Data\n    \n    > **Modeling**: What factors influence particular outcomes/behaviors?\n    \n    > **Information retrieval**: Finding needles in haystacks, aka search engines\n    \n    > **Collaborative filtering**: Recommending items based on items other users with similar tastes have chosen\n    \n    > **Outlier detection**: Discovering outstanding transactions---\n\n- OO, FP, IP\n    \n    > object oriented programming vs functional programming vs imperative programming\n    \n\nscala compiled to jvm bytecode, interoperate with jvm lib, not whitespace sensitive, bracket block denotatiin for data intensive, statically typed (cant change type), expressions have types, return type is most generic type of all return expressions\n\ndata classes are blueprints for immutable objects (java records), free equals method, pattern matching:\n\nimmutable vals vs mutable vars\n\npython , indentation sensitive, (tab=2space) interpreted for analytics, dynamic typing, statement-based, optional typing\n\njava the assembly of bdp\n\nr","x":-1058,"y":2518,"width":698,"height":622}
	],
	"edges":[
		{"id":"f7443a0638bf09d0","fromNode":"fd3c3052f35bd28b","fromSide":"top","toNode":"a9d6f845a3d405e0","toSide":"bottom"},
		{"id":"30a83e9971a6cf52","fromNode":"a9d6f845a3d405e0","fromSide":"top","toNode":"ff15ae6add4fdc74","toSide":"bottom"}
	]
}